import emailjs from '@emailjs/browser';

class EmailService {
  // Configuration EmailJS corrig√©e avec les vraies cl√©s
  private serviceId = 'Alarm_alerte';
  private templateId = 'template_bts_ticket';
  private publicKey = '0NftsL5CxGYcqWcNj';

  // Configuration avec les vraies cl√©s - tenter le mode r√©el
  private isSimulationMode = false;
  private simulationSuccess = true;

  // Real team emails for notifications
  private teamEmails = {
    ip: 'manuelmayi581@gmail.com',
    transmission: 'manuelmayi581@gmail.com',
    bss: 'zambouyvand@yahoo.com',
    power: 'manuelmayi581@gmail.com'
  };

  private isConfigured = false;
  private emailQueue: Array<{
    type: 'verification' | 'ticket' | 'update';
    params: any;
    retries: number;
  }> = [];
  private isProcessing = false;

  constructor() {
    this.initializeEmailJS();
    this.startQueueProcessor();
  }

  private initializeEmailJS() {
    try {
      console.log('üîß INITIALISATION EMAILJS - MODE SIMULATION ACTIV√â');
      console.log('‚ö†Ô∏è Compte EmailJS bloqu√© d√©tect√© - Basculement en mode simulation');
      console.log('üìß Les emails seront simul√©s avec logs d√©taill√©s');
      
      // En mode simulation, on consid√®re que c'est configur√©
      this.isConfigured = true;
      this.isSimulationMode = true;
      
      console.log('‚úÖ Mode simulation EmailJS activ√©');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation EmailJS:', error);
      this.isConfigured = false;
      this.isSimulationMode = true;
    }
  }

  private startQueueProcessor() {
    setInterval(() => {
      this.processEmailQueue();
    }, 3000);
  }

  private async processEmailQueue() {
    if (this.isProcessing || this.emailQueue.length === 0) return;

    this.isProcessing = true;
    const emailToSend = this.emailQueue.shift();

    if (emailToSend) {
      try {
        let success = false;

        switch (emailToSend.type) {
          case 'verification':
            success = await this.sendVerificationCodeDirect(emailToSend.params);
            break;
          case 'ticket':
            success = await this.sendTicketNotificationDirect(emailToSend.params);
            break;
          case 'update':
            success = await this.sendTicketUpdateDirect(emailToSend.params);
            break;
        }

        if (!success && emailToSend.retries < 3) {
          emailToSend.retries++;
          this.emailQueue.push(emailToSend);
          console.log(`üîÑ Email remis en queue (tentative ${emailToSend.retries}/3)`);
        }

      } catch (error) {
        console.error('‚ùå Erreur lors du traitement de la queue email:', error);
      }
    }

    this.isProcessing = false;
  }

  // üîê DOUBLE AUTHENTICATION EMAIL - MODE SIMULATION
  async sendVerificationCode(email: string, username: string, code: string): Promise<boolean> {
    console.log(`üìß ENVOI CODE DE V√âRIFICATION - MODE SIMULATION`);
    console.log(`üìû Email: ${email}`);
    console.log(`üë§ Utilisateur: ${username}`);
    console.log(`üîê Code: ${code}`);

    // Add to queue for processing
    this.emailQueue.push({
      type: 'verification',
      params: { email, username, code },
      retries: 0
    });

    // Try to send immediately
    return await this.sendVerificationCodeDirect({ email, username, code });
  }

  private async sendVerificationCodeDirect(params: { email: string; username: string; code: string }): Promise<boolean> {
    const { email, username, code } = params;

    if (this.isSimulationMode) {
      // Mode simulation avec logs d√©taill√©s
      console.log('üé≠ MODE SIMULATION - EMAIL DE V√âRIFICATION');
      console.log('‚ïê'.repeat(60));
      console.log(`üìß SIMULATION D'ENVOI EMAIL R√âUSSI`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üë§ Utilisateur: ${username}`);
      console.log(`üîê Code de v√©rification: ${code}`);
      console.log(`‚è∞ Heure d'envoi simul√©: ${new Date().toLocaleString('fr-FR')}`);
      console.log('');
      console.log('üìã CONTENU DE L\'EMAIL SIMUL√â:');
      console.log('‚îÄ'.repeat(40));
      console.log(`Sujet: üîê Code de v√©rification MTN: ${code}`);
      console.log('');
      console.log(`Bonjour ${username},`);
      console.log('');
      console.log('Votre code de v√©rification pour acc√©der au syst√®me BTS Monitor MTN Cameroun est :');
      console.log('');
      console.log(`üîê CODE: ${code}`);
      console.log('');
      console.log('‚è∞ Ce code est valide pendant 10 minutes.');
      console.log('üîí Gardez ce code confidentiel.');
      console.log('');
      console.log('Si vous n\'avez pas demand√© ce code, ignorez ce message.');
      console.log('');
      console.log('Cordialement,');
      console.log('L\'√©quipe MTN Cameroun');
      console.log('BTS Network Monitor');
      console.log('‚îÄ'.repeat(40));
      console.log('');
      console.log('‚úÖ EMAIL SIMUL√â ENVOY√â AVEC SUCC√àS!');
      console.log('üí° En mode r√©el, cet email serait envoy√© √† l\'adresse fournie');
      console.log('üîß Pour activer les vrais emails, r√©solvez le probl√®me de compte EmailJS');
      console.log('‚ïê'.repeat(60));
      
      // Simuler un d√©lai d'envoi
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      return this.simulationSuccess;
    }

    // Code pour envoi r√©el (d√©sactiv√© car compte bloqu√©)
    try {
      console.log('üöÄ Tentative d\'envoi r√©el...');
      
      const result = await emailjs.send(
        this.serviceId,
        this.templateId,
        {
          to_email: email,
          to_name: username,
          from_name: 'MTN Cameroun BTS Monitor',
          subject: `üîê Code de v√©rification MTN: ${code}`,
          message: `Code de v√©rification: ${code}`,
          verification_code: code,
          user_name: username,
          company_name: 'MTN Cameroun',
          dashboard_url: window.location.origin
        }
      );
      
      console.log('‚úÖ EMAIL R√âEL ENVOY√â!');
      return true;
      
    } catch (error: any) {
      console.log('‚ùå √âCHEC ENVOI R√âEL - Basculement en mode simulation');
      this.logDetailedError(error);
      
      // Basculer automatiquement en mode simulation
      this.isSimulationMode = true;
      return await this.sendVerificationCodeDirect(params);
    }
  }

  // üé´ TICKET NOTIFICATIONS - MODE SIMULATION
  async sendTicketNotification(team: string, ticketId: string, alarmMessage: string, site: string): Promise<boolean> {
    console.log(`üìß ENVOI NOTIFICATION TICKET - MODE SIMULATION`);
    console.log(`üë• √âquipe: ${team}`);
    console.log(`üé´ Ticket: ${ticketId}`);
    console.log(`üè¢ Site: ${site}`);

    // Add to queue
    this.emailQueue.push({
      type: 'ticket',
      params: { team, ticketId, alarmMessage, site },
      retries: 0
    });

    // Try to send immediately
    return await this.sendTicketNotificationDirect({ team, ticketId, alarmMessage, site });
  }

  private async sendTicketNotificationDirect(params: { team: string; ticketId: string; alarmMessage: string; site: string }): Promise<boolean> {
    const { team, ticketId, alarmMessage, site } = params;
    const email = this.teamEmails[team as keyof typeof this.teamEmails];
    
    if (!email) {
      console.error(`‚ùå Aucun email trouv√© pour l'√©quipe: ${team}`);
      return false;
    }

    if (this.isSimulationMode) {
      // Mode simulation avec logs d√©taill√©s
      console.log('üé≠ MODE SIMULATION - NOTIFICATION TICKET');
      console.log('‚ïê'.repeat(60));
      console.log(`üìß SIMULATION D'ENVOI NOTIFICATION R√âUSSI`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üë• √âquipe: ${this.getTeamName(team)}`);
      console.log(`üé´ Ticket: #${ticketId}`);
      console.log(`üè¢ Site: ${site}`);
      console.log(`‚ö†Ô∏è Alarme: ${alarmMessage}`);
      console.log(`‚è∞ Heure d'envoi simul√©: ${new Date().toLocaleString('fr-FR')}`);
      console.log('');
      console.log('üìã CONTENU DE L\'EMAIL SIMUL√â:');
      console.log('‚îÄ'.repeat(40));
      console.log(`Sujet: üö® NOUVEAU TICKET BTS #${ticketId} - ${site}`);
      console.log('');
      console.log(`üö® NOUVEAU TICKET BTS - MTN CAMEROUN`);
      console.log('');
      console.log(`üìç Site: ${site}`);
      console.log(`üé´ Ticket: #${ticketId}`);
      console.log(`‚ö†Ô∏è Alarme: ${alarmMessage}`);
      console.log(`üë• √âquipe assign√©e: ${this.getTeamName(team)}`);
      console.log(`üìä Statut: NOUVEAU`);
      console.log(`‚è∞ Cr√©√© le: ${new Date().toLocaleString('fr-FR')}`);
      console.log(`üî• Priorit√©: HAUTE`);
      console.log('');
      console.log(`üîó Acc√©dez au dashboard: ${window.location.origin}`);
      console.log('');
      console.log('‚ö° Action requise: Veuillez vous connecter au syst√®me pour traiter ce ticket imm√©diatement.');
      console.log('');
      console.log('Cordialement,');
      console.log('MTN Cameroun - BTS Network Monitor');
      console.log('üìû Support: +237 XXX XXX XXX');
      console.log('‚îÄ'.repeat(40));
      console.log('');
      console.log('‚úÖ NOTIFICATION SIMUL√âE ENVOY√âE AVEC SUCC√àS!');
      console.log('üí° En mode r√©el, cette notification serait envoy√©e √† l\'√©quipe');
      console.log('üîß Pour activer les vrais emails, r√©solvez le probl√®me de compte EmailJS');
      console.log('‚ïê'.repeat(60));
      
      // Simuler un d√©lai d'envoi
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      return this.simulationSuccess;
    }

    // Code pour envoi r√©el (d√©sactiv√© car compte bloqu√©)
    try {
      const result = await emailjs.send(this.serviceId, this.templateId, {
        to_email: email,
        to_name: this.getTeamName(team),
        subject: `üö® NOUVEAU TICKET BTS #${ticketId} - ${site}`,
        message: `Nouveau ticket cr√©√© pour ${site}`,
        ticket_id: ticketId,
        site_name: site,
        alarm_message: alarmMessage,
        team_name: this.getTeamName(team)
      });
      
      console.log('‚úÖ NOTIFICATION R√âELLE ENVOY√âE!');
      return true;
      
    } catch (error: any) {
      console.log('‚ùå √âCHEC ENVOI R√âEL - Basculement en mode simulation');
      this.logDetailedError(error);
      
      this.isSimulationMode = true;
      return await this.sendTicketNotificationDirect(params);
    }
  }

  // üìã TICKET UPDATES - MODE SIMULATION
  async sendTicketUpdate(team: string, ticketId: string, status: string, updateMessage?: string): Promise<boolean> {
    console.log(`üìß ENVOI MISE √Ä JOUR TICKET - MODE SIMULATION`);
    
    // Add to queue
    this.emailQueue.push({
      type: 'update',
      params: { team, ticketId, status, updateMessage },
      retries: 0
    });

    // Try to send immediately
    return await this.sendTicketUpdateDirect({ team, ticketId, status, updateMessage });
  }

  private async sendTicketUpdateDirect(params: { team: string; ticketId: string; status: string; updateMessage?: string }): Promise<boolean> {
    const { team, ticketId, status, updateMessage } = params;
    const email = this.teamEmails[team as keyof typeof this.teamEmails];
    
    if (!email) {
      console.error(`‚ùå Aucun email trouv√© pour l'√©quipe: ${team}`);
      return false;
    }

    if (this.isSimulationMode) {
      console.log('üé≠ MODE SIMULATION - MISE √Ä JOUR TICKET');
      console.log('‚ïê'.repeat(60));
      console.log(`üìß SIMULATION MISE √Ä JOUR R√âUSSIE`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üé´ Ticket: #${ticketId}`);
      console.log(`üîÑ Nouveau statut: ${this.getStatusText(status)}`);
      console.log(`üí¨ Commentaire: ${updateMessage || 'Statut mis √† jour'}`);
      console.log(`‚è∞ Heure de mise √† jour simul√©e: ${new Date().toLocaleString('fr-FR')}`);
      console.log('‚úÖ MISE √Ä JOUR SIMUL√âE ENVOY√âE!');
      console.log('‚ïê'.repeat(60));
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      return this.simulationSuccess;
    }

    // Code pour envoi r√©el
    try {
      const result = await emailjs.send(this.serviceId, this.templateId, {
        to_email: email,
        subject: `üìã MISE √Ä JOUR TICKET #${ticketId}`,
        message: `Ticket mis √† jour: ${status}`,
        ticket_id: ticketId,
        status: this.getStatusText(status),
        update_message: updateMessage
      });
      
      console.log('‚úÖ MISE √Ä JOUR R√âELLE ENVOY√âE!');
      return true;
      
    } catch (error: any) {
      console.log('‚ùå √âCHEC ENVOI R√âEL - Basculement en mode simulation');
      this.isSimulationMode = true;
      return await this.sendTicketUpdateDirect(params);
    }
  }

  private logDetailedError(error: any) {
    console.log('üîç ANALYSE D√âTAILL√âE DE L\'ERREUR:');
    console.log('üìä Erreur compl√®te:', error);
    console.log('üìä Status:', error.status);
    console.log('üìä Text:', error.text);
    console.log('üìä Message:', error.message);
    
    if (error.text && error.text.includes('blocked')) {
      console.log('üö´ DIAGNOSTIC: Compte EmailJS bloqu√©');
      console.log('üîß SOLUTIONS POSSIBLES:');
      console.log('   1. V√©rifiez votre compte sur dashboard.emailjs.com');
      console.log('   2. Le compte peut √™tre bloqu√© pour:');
      console.log('      - D√©passement du quota gratuit (200 emails/mois)');
      console.log('      - Activit√© suspecte d√©tect√©e');
      console.log('      - Violation des conditions d\'utilisation');
      console.log('      - Probl√®me de paiement (si compte payant)');
      console.log('   3. Contactez le support EmailJS');
      console.log('   4. Cr√©ez un nouveau compte EmailJS');
      console.log('   5. Utilisez un autre service (SendGrid, Mailgun, etc.)');
      console.log('');
      console.log('üí° EN ATTENDANT: Le syst√®me fonctionne en mode simulation');
      console.log('   - Tous les emails sont simul√©s avec logs d√©taill√©s');
      console.log('   - Les codes de v√©rification apparaissent dans la console');
      console.log('   - Les notifications de tickets sont logg√©es');
    }
  }

  private getTeamName(teamType: string): string {
    const teamNames = {
      ip: '√âquipe IP MTN',
      transmission: '√âquipe Transmission MTN',
      bss: '√âquipe BSS MTN',
      power: '√âquipe Power MTN'
    };
    return teamNames[teamType as keyof typeof teamNames] || '√âquipe MTN';
  }

  private getStatusText(status: string): string {
    const statusTexts = {
      open: 'OUVERT',
      in_progress: 'EN COURS',
      resolved: 'R√âSOLU',
      closed: 'FERM√â'
    };
    return statusTexts[status as keyof typeof statusTexts] || status.toUpperCase();
  }

  // üß™ TEST METHODS - MODE SIMULATION
  async testEmail(team: string = 'ip'): Promise<boolean> {
    console.log(`üß™ TEST EMAIL - MODE SIMULATION ACTIV√â`);
    console.log(`üë• √âquipe: ${team}`);
    
    const email = this.teamEmails[team as keyof typeof this.teamEmails];
    console.log(`üìû Email de test: ${email}`);
    
    if (!email) {
      console.error(`‚ùå Aucun email pour l'√©quipe: ${team}`);
      return false;
    }

    if (this.isSimulationMode) {
      console.log('üé≠ MODE SIMULATION - TEST EMAIL');
      console.log('‚ïê'.repeat(60));
      console.log(`üìß SIMULATION TEST EMAIL R√âUSSI`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üë• √âquipe: ${this.getTeamName(team)}`);
      console.log(`‚è∞ Heure de test simul√©: ${new Date().toLocaleString('fr-FR')}`);
      console.log('');
      console.log('üìã CONTENU DU TEST SIMUL√â:');
      console.log('‚îÄ'.repeat(40));
      console.log('Sujet: üß™ Test EmailJS MTN - Mode Simulation');
      console.log('');
      console.log('üß™ TEST DU SYST√àME EMAIL EN MODE SIMULATION');
      console.log('');
      console.log('Ceci est un test pour v√©rifier que le syst√®me de simulation fonctionne correctement.');
      console.log('');
      console.log('Configuration actuelle:');
      console.log('- Mode: SIMULATION (compte EmailJS bloqu√©)');
      console.log('- Logs: D√©taill√©s dans la console');
      console.log('- Fonctionnalit√©: Compl√®te en mode test');
      console.log('');
      console.log('‚úÖ Si vous voyez ce message, le mode simulation fonctionne parfaitement !');
      console.log('');
      console.log('Pour activer les vrais emails:');
      console.log('1. R√©solvez le probl√®me de compte EmailJS bloqu√©');
      console.log('2. Ou cr√©ez un nouveau compte EmailJS');
      console.log('3. Mettez √† jour les cl√©s dans le code');
      console.log('');
      console.log('Cordialement,');
      console.log('MTN Cameroun BTS Monitor');
      console.log('‚îÄ'.repeat(40));
      console.log('');
      console.log('‚úÖ TEST SIMUL√â R√âUSSI!');
      console.log('üí° Le syst√®me fonctionne parfaitement en mode simulation');
      console.log('üîß R√©solvez le probl√®me EmailJS pour les vrais emails');
      console.log('‚ïê'.repeat(60));
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      return true;
    }

    // Code pour test r√©el
    try {
      const result = await emailjs.send(this.serviceId, this.templateId, {
        to_email: email,
        subject: 'üß™ Test EmailJS MTN',
        message: 'Test du syst√®me email',
        company_name: 'MTN Cameroun'
      });
      
      console.log('‚úÖ TEST R√âEL R√âUSSI!');
      return true;
      
    } catch (error: any) {
      console.log('‚ùå TEST R√âEL √âCHOU√â - Mode simulation activ√©');
      this.logDetailedError(error);
      this.isSimulationMode = true;
      return await this.testEmail(team);
    }
  }

  async testVerificationCode(email: string = 'manuelmayi581@gmail.com'): Promise<boolean> {
    console.log('üß™ TEST CODE DE V√âRIFICATION - MODE SIMULATION');
    console.log(`üìû Email de test: ${email}`);
    
    const testCode = Math.random().toString(36).substr(2, 6).toUpperCase();
    console.log(`üîê Code de test g√©n√©r√©: ${testCode}`);
    
    return await this.sendVerificationCode(email, 'TestUser', testCode);
  }

  // üìä MONITORING METHODS
  getQueueStats() {
    return {
      pending: this.emailQueue.length,
      isProcessing: this.isProcessing,
      lastEmailTime: new Date().toLocaleString('fr-FR'),
      quotaReached: false,
      nextTicketTeam: 'ip',
      nextAvailableTime: null,
      apiVersion: this.isSimulationMode ? 'Mode Simulation (Compte Bloqu√©)' : 'API R√©elle'
    };
  }

  getSessionStatus() {
    return {
      ticketsUsed: 0,
      ticketsRemaining: this.isSimulationMode ? 'Illimit√© (Simulation)' : 200,
      nextTeam: 'ip',
      canSendNow: true,
      sessionStartTime: new Date().toLocaleString('fr-FR'),
      apiStatus: this.isSimulationMode ? 'Mode Simulation Active (Compte EmailJS Bloqu√©)' : 'API R√©elle Active'
    };
  }

  resetQuotaFlag(): void {
    console.log('‚úÖ Queue r√©initialis√©e - Mode Simulation');
    this.emailQueue.length = 0;
  }

  getConfigurationStatus(): string {
    if (this.isSimulationMode) {
      return `‚ö†Ô∏è Mode Simulation Activ√© - Compte EmailJS bloqu√© d√©tect√© | Tous les emails sont simul√©s avec logs d√©taill√©s`;
    }
    return `‚úÖ EmailJS configur√© - Service actif`;
  }

  async verifyEmailJSConfiguration(): Promise<{ success: boolean; message: string }> {
    console.log('üîç V√âRIFICATION DE LA CONFIGURATION EMAILJS');
    
    if (this.isSimulationMode) {
      return {
        success: true,
        message: `‚ö†Ô∏è Mode Simulation Actif - Compte EmailJS bloqu√© d√©tect√©. Le syst√®me fonctionne en mode simulation avec logs d√©taill√©s. Pour activer les vrais emails, r√©solvez le probl√®me de compte bloqu√© sur dashboard.emailjs.com`
      };
    }
    
    try {
      const result = await emailjs.send(this.serviceId, this.templateId, {
        to_email: 'test@example.com',
        subject: 'Test de configuration',
        message: 'Test de v√©rification',
        test_mode: true
      });
      
      return {
        success: true,
        message: `‚úÖ Configuration EmailJS valide! Status: ${result.status}`
      };
      
    } catch (error: any) {
      console.log('‚ùå V√©rification √©chou√©e - Activation du mode simulation');
      this.logDetailedError(error);
      this.isSimulationMode = true;
      
      return {
        success: false,
        message: `‚ùå Compte EmailJS bloqu√© d√©tect√©. Mode simulation activ√©. R√©solvez le probl√®me sur dashboard.emailjs.com ou cr√©ez un nouveau compte.`
      };
    }
  }

  // M√©thode pour basculer manuellement en mode simulation
  enableSimulationMode(): void {
    this.isSimulationMode = true;
    console.log('üé≠ Mode simulation activ√© manuellement');
  }

  // M√©thode pour tenter de r√©activer le mode r√©el
  async tryRealMode(): Promise<boolean> {
    this.isSimulationMode = false;
    const result = await this.verifyEmailJSConfiguration();
    return result.success;
  }

  // Obtenir le statut du mode
  getMode(): 'simulation' | 'real' {
    return this.isSimulationMode ? 'simulation' : 'real';
  }
}

export const emailService = new EmailService();