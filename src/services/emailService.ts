import emailjs from '@emailjs/browser';

class EmailService {
  // Configuration EmailJS - √Ä remplacer par vos vraies cl√©s
  private serviceId = 'service_bts_monitor';
  private templateId = 'template_bts_ticket';
  private publicKey = 'YOUR_EMAILJS_PUBLIC_KEY';

  private teamEmails = {
    ip: 'manuelmayi581@gmail.com',
    transmission: 'transmission@company.com',
    bss: 'bss@company.com',
    power: 'power@company.com'
  };

  constructor() {
    // Initialiser EmailJS avec votre cl√© publique
    emailjs.init(this.publicKey);
  }

  async sendTicketNotification(team: string, ticketId: string, alarmMessage: string, site: string): Promise<boolean> {
    const email = this.teamEmails[team as keyof typeof this.teamEmails];
    
    if (!email) {
      console.error(`‚ùå Aucun email trouv√© pour l'√©quipe: ${team}`);
      return false;
    }

    const templateParams = {
      to_email: email,
      to_name: this.getTeamName(team),
      ticket_id: ticketId,
      site_name: site,
      alarm_message: alarmMessage,
      team_name: this.getTeamName(team),
      status: 'OUVERT',
      created_date: new Date().toLocaleString('fr-FR'),
      priority: this.getPriorityFromMessage(alarmMessage),
      dashboard_url: window.location.origin
    };

    try {
      console.log(`üìß Envoi d'email en cours...`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üë• √âquipe: ${this.getTeamName(team)}`);
      console.log(`üé´ Ticket: #${ticketId}`);
      
      const result = await emailjs.send(
        this.serviceId,
        this.templateId,
        templateParams
      );
      
      console.log(`‚úÖ Email envoy√© avec succ√®s!`);
      console.log(`üìß Message ID: ${result.text}`);
      console.log(`‚è∞ Heure: ${new Date().toLocaleString('fr-FR')}`);
      console.log('‚îÄ'.repeat(50));
      
      return true;
    } catch (error) {
      console.error('‚ùå √âchec d\'envoi email:', error);
      return false;
    }
  }

  async sendTicketUpdate(team: string, ticketId: string, status: string, updateMessage?: string): Promise<boolean> {
    const email = this.teamEmails[team as keyof typeof this.teamEmails];
    
    if (!email) {
      console.error(`‚ùå Aucun email trouv√© pour l'√©quipe: ${team}`);
      return false;
    }

    const templateParams = {
      to_email: email,
      to_name: this.getTeamName(team),
      ticket_id: ticketId,
      team_name: this.getTeamName(team),
      status: this.getStatusText(status),
      update_message: updateMessage || 'Statut mis √† jour',
      updated_date: new Date().toLocaleString('fr-FR'),
      dashboard_url: window.location.origin
    };

    try {
      console.log(`üìß Envoi d'email de mise √† jour...`);
      console.log(`üìû Destinataire: ${email}`);
      console.log(`üé´ Ticket: #${ticketId}`);
      console.log(`üîÑ Nouveau statut: ${this.getStatusText(status)}`);
      
      const result = await emailjs.send(
        this.serviceId,
        'template_bts_update', // Template diff√©rent pour les mises √† jour
        templateParams
      );
      
      console.log(`‚úÖ Email de mise √† jour envoy√©!`);
      console.log(`‚è∞ Heure: ${new Date().toLocaleString('fr-FR')}`);
      console.log('‚îÄ'.repeat(50));
      
      return true;
    } catch (error) {
      console.error('‚ùå √âchec d\'envoi email de mise √† jour:', error);
      return false;
    }
  }

  private getTeamName(teamType: string): string {
    const teamNames = {
      ip: '√âquipe IP',
      transmission: '√âquipe Transmission',
      bss: '√âquipe BSS',
      power: '√âquipe Power'
    };
    return teamNames[teamType as keyof typeof teamNames] || '√âquipe Inconnue';
  }

  private getStatusText(status: string): string {
    const statusTexts = {
      open: 'OUVERT',
      in_progress: 'EN COURS',
      resolved: 'R√âSOLU',
      closed: 'FERM√â'
    };
    return statusTexts[status as keyof typeof statusTexts] || status.toUpperCase();
  }

  private getPriorityFromMessage(message: string): string {
    const lowerMessage = message.toLowerCase();
    if (lowerMessage.includes('critique') || lowerMessage.includes('panne') || lowerMessage.includes('d√©faillant')) {
      return 'HAUTE';
    } else if (lowerMessage.includes('majeur') || lowerMessage.includes('interrompu')) {
      return 'MOYENNE';
    }
    return 'BASSE';
  }

  // M√©thode pour tester l'envoi d'email
  async testEmail(team: string = 'ip'): Promise<boolean> {
    console.log(`üß™ Test d'envoi d'email pour l'√©quipe ${team}...`);
    return await this.sendTicketNotification(
      team,
      'TEST-001',
      'Test de notification - Alarme de test critique',
      'BTS-TEST-001'
    );
  }

  // M√©thode pour v√©rifier la configuration
  checkConfiguration(): { isValid: boolean; issues: string[] } {
    const issues: string[] = [];
    
    if (!this.serviceId || this.serviceId === 'YOUR_SERVICE_ID') {
      issues.push('Service ID EmailJS non configur√©');
    }
    
    if (!this.templateId || this.templateId === 'YOUR_TEMPLATE_ID') {
      issues.push('Template ID EmailJS non configur√©');
    }
    
    if (!this.publicKey || this.publicKey === 'YOUR_EMAILJS_PUBLIC_KEY') {
      issues.push('Cl√© publique EmailJS non configur√©e');
    }

    Object.entries(this.teamEmails).forEach(([team, email]) => {
      if (!email || email.includes('@company.com')) {
        issues.push(`Email manquant pour l'√©quipe ${team}`);
      }
    });

    return {
      isValid: issues.length === 0,
      issues
    };
  }

  // M√©thode pour mettre √† jour la configuration
  updateConfiguration(serviceId: string, templateId: string, publicKey: string) {
    this.serviceId = serviceId;
    this.templateId = templateId;
    this.publicKey = publicKey;
    emailjs.init(this.publicKey);
    console.log('‚úÖ Configuration EmailJS mise √† jour');
  }

  // M√©thode pour ajouter/modifier un email d'√©quipe
  updateTeamEmail(team: string, email: string) {
    this.teamEmails[team as keyof typeof this.teamEmails] = email;
    console.log(`‚úÖ Email mis √† jour pour l'√©quipe ${team}: ${email}`);
  }
}

export const emailService = new EmailService();